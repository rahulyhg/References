<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><title>ViewPager with FragmentPagerAdapter | CodePath Android Cliffnotes</title><link href="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/bootstrap.css" rel="stylesheet" type="text/css"><link href="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/bootstrap-forms.css" rel="stylesheet" type="text/css"><link href="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/markdown.css" rel="stylesheet" type="text/css"><link href="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/style.css" rel="stylesheet" type="text/css"><meta content="width=device-width, initial-scale=1.0" name="viewport"><script src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/linkid.js" async="" type="text/javascript"></script><script src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/analytics.js" async=""></script><script type="text/javascript">(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-47712505-2', 'codepath.com');
ga('require', 'linkid', 'linkid.js');
ga('require', 'displayfeatures');
ga('send', 'pageview');</script></head><body><div class="header"><div class="inner-content clearfix"><a class="pull-left" href="https://guides.codepath.com/android"><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/codepath.svg" height="30"></a><div class="pull-right"><form action="/android/search" class="form-inline search" method="get" role="search"><div class="form-group"><input class="form-control" id="query" name="query" placeholder="Search" style="width: 20em;" type="text"><button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button></div></form></div></div></div><div class="container"><div class="row" id="wiki-content"><div class="markdown-toc" style="max-height: 484px; position: absolute; top: 8684px; left: 986.7px; width: 310px; height: 482px;"><div class="title">Jump to Section</div><div class="toc"><div class="toc-title">Table of Contents</div><ul><ul><li><a href="#overview">Overview</a></li></ul></ul><ul><ul><li><a href="#usage">Usage</a></li></ul></ul><ul><ul><ul><li><a href="#layout-viewpager">Layout ViewPager</a></li></ul></ul></ul><ul><ul><ul><li><a href="#define-fragments">Define Fragments</a></li></ul></ul></ul><ul><ul><ul><li><a href="#setup-fragmentpageradapter">Setup FragmentPagerAdapter</a></li></ul></ul></ul><ul><ul><ul><li><a href="#apply-the-adapter">Apply the Adapter</a></li></ul></ul></ul><ul><ul><ul><li><a href="#selecting-or-getting-the-page">Selecting or Getting the Page</a></li></ul></ul></ul><ul><ul><ul><li><a href="#setup-onpagechangelistener">Setup OnPageChangeListener</a></li></ul></ul></ul><ul><ul><li><a href="#tabbed-interface-with-pager">Tabbed Interface with Pager</a></li></ul></ul><ul><ul><li><a href="#dynamic-viewpager-fragments">Dynamic ViewPager Fragments</a></li></ul></ul><ul><ul><ul><li><a href="#setup-smartfragmentstatepageradapter">Setup SmartFragmentStatePagerAdapter</a></li></ul></ul></ul><ul><ul><ul><li><a href="#access-fragment-instances">Access Fragment Instances</a></li></ul></ul></ul><ul><ul><li><a href="#set-offscreen-page-limit">Set Offscreen Page Limit</a></li></ul></ul><ul><ul><li><a href="#viewpager-with-visible-adjacent-pages">ViewPager with Visible Adjacent Pages</a></li></ul></ul><ul><ul><li><a href="#animating-the-scroll-with-pagetransformer">Animating the Scroll with PageTransformer</a></li></ul></ul><ul><ul><ul><li><a href="#using-a-third-party-library">Using a Third-Party Library</a></li></ul></ul></ul><ul><ul><ul><li><a href="#developing-custom-transforms">Developing Custom Transforms</a></li></ul></ul></ul><ul><ul><li><a href="#disabling-swipe-events">Disabling Swipe Events</a></li></ul></ul><ul><ul><li><a href="#launching-an-activity-with-tab-selected">Launching an Activity with Tab Selected</a></li></ul></ul><ul><ul><li><a href="#custom-pages-without-fragments">Custom Pages without Fragments</a></li></ul></ul><ul><ul><li><a href="#custom-viewpager-indicators">Custom ViewPager Indicators</a></li></ul></ul><ul><ul><li><a href="#references">References</a></li></ul></ul></div></div><h1 class="col-xs-4 col-sm-9 col-md-9 col-lg-9" id="wiki-title">ViewPager with FragmentPagerAdapter<div class="page-nav"><a class="btn btn-primary edit-link" href="https://github.com/codepath/android_guides/wiki/ViewPager-with-FragmentPagerAdapter/_edit">Edit Page</a><a class="btn btn-primary edit-link" href="https://github.com/codepath/android_guides/wiki/ViewPager-with-FragmentPagerAdapter/_history">Page History</a></div></h1><div id="wiki-body"><div class="markdown-body col-xs-6 col-sm-9 col-md-12 col-lg-12"><h2><a class="anchor" id="overview" href="#overview"><i class="fa fa-link"></i></a>Overview</h2>

<p>Layout that allows the user to swipe left and right through "pages" 
of content which are usually different fragments. This is a common 
navigation mode to use instead of <a class="internal present" href="https://guides.codepath.com/android/ActionBar-Tabs-with-Fragments">ActionBar Tabs with Fragments</a>.</p>

<p><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/75zqnxN.png" alt="ViewPager"></p>

<h2><a class="anchor" id="usage" href="#usage"><i class="fa fa-link"></i></a>Usage</h2>

<h3><a class="anchor" id="layout-viewpager" href="#layout-viewpager"><i class="fa fa-link"></i></a>Layout ViewPager</h3>

<p>A <code>ViewPager</code> is a layout which can be added to any layout XML file inside a root layout:</p>

<pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span><span class="nt">&gt;</span>
 
    <span class="nt">&lt;android.support.v4.view.ViewPager</span>
        <span class="na">android:id=</span><span class="s">"@+id/vpPager"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/android.support.v4.view.ViewPager&gt;</span>
<span class="nt">&lt;/LinearLayout&gt;</span></code></pre>


<p>If you want an "indicator" that displays the pages available at the 
top as shown in the screenshot above, you need to include a nested 
indicator view called a <a href="http://developer.android.com/reference/android/support/v4/view/PagerTabStrip.html">PagerTabStrip</a>:</p>

<pre class="highlight"><code><span class="nt">&lt;android.support.v4.view.ViewPager</span>
   <span class="na">android:id=</span><span class="s">"@+id/vpPager"</span>
   <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
   <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span><span class="nt">&gt;</span>

   <span class="nt">&lt;android.support.v4.view.PagerTabStrip</span>
        <span class="na">android:id=</span><span class="s">"@+id/pager_header"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_gravity=</span><span class="s">"top"</span>
        <span class="na">android:paddingBottom=</span><span class="s">"4dp"</span>
        <span class="na">android:paddingTop=</span><span class="s">"4dp"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/android.support.v4.view.ViewPager&gt;</span></code></pre>


<p>which will automatically display the page indicator for your pager. You might want to check out the popular <a href="http://viewpagerindicator.com/">ViewPagerIndicator</a> for an improved page indicator. </p>

<h3><a class="anchor" id="define-fragments" href="#define-fragments"><i class="fa fa-link"></i></a>Define Fragments</h3>

<p>Next, let's suppose we have defined two fragments <code>FirstFragment</code> and <code>SecondFragment</code> both of which contain a label in the layout and have implementations such as:</p>

<pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FirstFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
	<span class="c1">// Store instance variables</span>
	<span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">page</span><span class="o">;</span>

	<span class="c1">// newInstance constructor for creating fragment with arguments</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="n">FirstFragment</span> <span class="n">newInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">FirstFragment</span> <span class="n">fragmentFirst</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirstFragment</span><span class="o">();</span>
		<span class="n">Bundle</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
		<span class="n">args</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="s">"someInt"</span><span class="o">,</span> <span class="n">page</span><span class="o">);</span>
		<span class="n">args</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">"someTitle"</span><span class="o">,</span> <span class="n">title</span><span class="o">);</span>
		<span class="n">fragmentFirst</span><span class="o">.</span><span class="na">setArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">fragmentFirst</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="c1">// Store instance variables based on arguments passed</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
		<span class="n">page</span> <span class="o">=</span> <span class="n">getArguments</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="s">"someInt"</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
		<span class="n">title</span> <span class="o">=</span> <span class="n">getArguments</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="s">"someTitle"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="c1">// Inflate the view for the fragment based on layout XML</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="n">View</span> <span class="n">onCreateView</span><span class="o">(</span><span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span> 
            <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fragment_first</span><span class="o">,</span> <span class="n">container</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
		<span class="n">TextView</span> <span class="n">tvLabel</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tvLabel</span><span class="o">);</span>
		<span class="n">tvLabel</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">page</span> <span class="o">+</span> <span class="s">" -- "</span> <span class="o">+</span> <span class="n">title</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">view</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span></code></pre>


<h3><a class="anchor" id="setup-fragmentpageradapter" href="#setup-fragmentpageradapter"><i class="fa fa-link"></i></a>Setup FragmentPagerAdapter</h3>

<p>Now we need to define the adapter that will properly determine how 
many pages exist and which fragment to display for each page of the 
adapter by creating a <a href="http://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html">FragmentPagerAdapter</a>:</p>

<pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
	<span class="c1">// ...</span>
	
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyPagerAdapter</span> <span class="kd">extends</span> <span class="n">FragmentPagerAdapter</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">NUM_ITEMS</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
		
        <span class="kd">public</span> <span class="n">MyPagerAdapter</span><span class="o">(</span><span class="n">FragmentManager</span> <span class="n">fragmentManager</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">fragmentManager</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="c1">// Returns total number of pages</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="n">getCount</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">NUM_ITEMS</span><span class="o">;</span>
        <span class="o">}</span>
 
        <span class="c1">// Returns the fragment to display for that page</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">Fragment</span> <span class="n">getItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">position</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="c1">// Fragment # 0 - This will show FirstFragment</span>
                <span class="k">return</span> <span class="n">FirstFragment</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"Page # 1"</span><span class="o">);</span>
            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="c1">// Fragment # 0 - This will show FirstFragment different title</span>
                <span class="k">return</span> <span class="n">FirstFragment</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"Page # 2"</span><span class="o">);</span>
            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="c1">// Fragment # 1 - This will show SecondFragment</span>
                <span class="k">return</span> <span class="n">SecondFragment</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">"Page # 3"</span><span class="o">);</span>
            <span class="k">default</span><span class="o">:</span>
            	<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="c1">// Returns the page title for the top indicator</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">CharSequence</span> <span class="n">getPageTitle</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        	<span class="k">return</span> <span class="s">"Page "</span> <span class="o">+</span> <span class="n">position</span><span class="o">;</span>
        <span class="o">}</span>
        
    <span class="o">}</span>

<span class="o">}</span></code></pre>


<p>For more complex cases with many pages, check out the <a class="internal present" href="https://guides.codepath.com/android/ViewPager-with-FragmentPagerAdapter#dynamic-viewpager-fragments">more dynamic approach</a> with <code>SmartFragmentStatePagerAdapter</code> explained later.</p>

<h3><a class="anchor" id="apply-the-adapter" href="#apply-the-adapter"><i class="fa fa-link"></i></a>Apply the Adapter</h3>

<p>Finally, let's associate the <code>ViewPager</code> with a new instance of our adapter:</p>

<pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
	<span class="n">FragmentPagerAdapter</span> <span class="n">adapterViewPager</span><span class="o">;</span>

	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
		<span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_home</span><span class="o">);</span>
		<span class="n">ViewPager</span> <span class="n">vpPager</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewPager</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">vpPager</span><span class="o">);</span>
		<span class="n">adapterViewPager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyPagerAdapter</span><span class="o">(</span><span class="n">getSupportFragmentManager</span><span class="o">());</span>
		<span class="n">vpPager</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapterViewPager</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="c1">// ...</span>
<span class="o">}</span></code></pre>


<p>And now we have a basic functioning <code>ViewPager</code> with any number of fragments as pages which can be swiped between. </p>

<h3><a class="anchor" id="selecting-or-getting-the-page" href="#selecting-or-getting-the-page"><i class="fa fa-link"></i></a>Selecting or Getting the Page</h3>

<p>We can access the selected page within the <code>ViewPager</code> at any time with the <a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.html#getCurrentItem%28%29">getCurrentItem</a> method which returns the current page:</p>

<pre class="highlight"><code><span class="n">vpPager</span><span class="o">.</span><span class="na">getCurrentItem</span><span class="o">();</span> <span class="c1">// --&gt; 2</span></code></pre>


<p>The current page can also be changed programmatically with the </p>

<pre class="highlight"><code><span class="n">vpPager</span><span class="o">.</span><span class="na">setCurrentItem</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span></code></pre>


<p>With this getter and setter, we can easily access or modify the selected page at runtime.</p>

<h3><a class="anchor" id="setup-onpagechangelistener" href="#setup-onpagechangelistener"><i class="fa fa-link"></i></a>Setup OnPageChangeListener</h3>

<p>If the Activity needs to be able listen for changes to the page selected or other events surrounding the <code>ViewPager</code>, then we just need to hook into the <a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.OnPageChangeListener.html">ViewPager.OnPageChangeListener</a> on the <code>ViewPager</code> to handle the events:</p>

<pre class="highlight"><code><span class="c1">// Attach the page change listener inside the activity</span>
<span class="n">vpPager</span><span class="o">.</span><span class="na">addOnPageChangeListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnPageChangeListener</span><span class="o">()</span> <span class="o">{</span>
	
	<span class="c1">// This method will be invoked when a new page becomes selected.</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">onPageSelected</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">HomeActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> 
                    <span class="s">"Selected page position: "</span> <span class="o">+</span> <span class="n">position</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="c1">// This method will be invoked when the current page is scrolled</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">onPageScrolled</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">float</span> <span class="n">positionOffset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">positionOffsetPixels</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// Code goes here</span>
	<span class="o">}</span>
	
	<span class="c1">// Called when the scroll state changes: </span>
	<span class="c1">// SCROLL_STATE_IDLE, SCROLL_STATE_DRAGGING, SCROLL_STATE_SETTLING</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">onPageScrollStateChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// Code goes here</span>
	<span class="o">}</span>
<span class="o">});</span></code></pre>


<h2><a class="anchor" id="tabbed-interface-with-pager" href="#tabbed-interface-with-pager"><i class="fa fa-link"></i></a>Tabbed Interface with Pager</h2>

<p>We can use the ViewPager to display a tabbed indicator in order to create tabs to display our fragments. 
At Google I/O 2015, Google announced a new <code>TabLayout</code> class that makes creating this tabbed interface fairly easy to do.  See <a class="internal present" href="https://guides.codepath.com/android/Google-Play-Style-Tabs-using-TabLayout">Google Play Style Tabs using TabLayout</a> for a walkthrough.</p>

<p>An alternative approach to achieve this is to use the third-party <a class="internal present" href="https://guides.codepath.com/android/Sliding-Tabs-with-PagerSlidingTabStrip">PagerSlidingTabStrip</a> library. </p>

<p><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/a2wpJ80.png" alt="Tabs"></p>

<p>In this way, we can use the same pager system described above and augment the pager with a tabbed navigation indicator.</p>

<h2><a class="anchor" id="dynamic-viewpager-fragments" href="#dynamic-viewpager-fragments"><i class="fa fa-link"></i></a>Dynamic ViewPager Fragments</h2>

<p>In certain cases, we may require a dynamic <code>ViewPager</code> 
where we want to get access to fragment instances or with pages being 
added or removed at runtime. If your ViewPager is more dynamic with many
 pages and fragments, we will want to use an implementation of the 
alternate <a href="http://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html">FragmentStatePagerAdapter</a> instead. Below shows us how to use this and also intelligently cache the fragments for easy lookup.</p>

<h3><a class="anchor" id="setup-smartfragmentstatepageradapter" href="#setup-smartfragmentstatepageradapter"><i class="fa fa-link"></i></a>Setup SmartFragmentStatePagerAdapter</h3>

<p>First, copy in the <a href="https://gist.github.com/nesquena/c715c9b22fb873b1d259">SmartFragmentStatePagerAdapter.java</a> which provides the intelligent caching of registered fragments within our <code>ViewPager</code>. This solves the common problem of needing to <strong>access the current item within the ViewPager</strong>.</p>

<p>Now, we want to extend from <code>SmartFragmentStatePagerAdapter</code> copied above when declaring our adapter so we can take advantage of the better memory management of the state pager:</p>

<pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
    <span class="c1">// ...</span>
    <span class="kd">private</span> <span class="n">SmartFragmentStatePagerAdapter</span> <span class="n">adapterViewPager</span><span class="o">;</span>
    
    <span class="c1">// Extend from SmartFragmentStatePagerAdapter now instead for more dynamic ViewPager items</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyPagerAdapter</span> <span class="kd">extends</span> <span class="n">SmartFragmentStatePagerAdapter</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">NUM_ITEMS</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
		
        <span class="kd">public</span> <span class="n">MyPagerAdapter</span><span class="o">(</span><span class="n">FragmentManager</span> <span class="n">fragmentManager</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">fragmentManager</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="c1">// Returns total number of pages</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="n">getCount</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">NUM_ITEMS</span><span class="o">;</span>
        <span class="o">}</span>
 
        <span class="c1">// Returns the fragment to display for that page</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">Fragment</span> <span class="n">getItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">position</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="c1">// Fragment # 0 - This will show FirstFragment</span>
                <span class="k">return</span> <span class="n">FirstFragment</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"Page # 1"</span><span class="o">);</span>
            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="c1">// Fragment # 0 - This will show FirstFragment different title</span>
                <span class="k">return</span> <span class="n">FirstFragment</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"Page # 2"</span><span class="o">);</span>
            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="c1">// Fragment # 1 - This will show SecondFragment</span>
                <span class="k">return</span> <span class="n">SecondFragment</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">"Page # 3"</span><span class="o">);</span>
            <span class="k">default</span><span class="o">:</span>
            	<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="c1">// Returns the page title for the top indicator</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">CharSequence</span> <span class="n">getPageTitle</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        	<span class="k">return</span> <span class="s">"Page "</span> <span class="o">+</span> <span class="n">position</span><span class="o">;</span>
        <span class="o">}</span>
        
    <span class="o">}</span>

<span class="o">}</span></code></pre>


<h3><a class="anchor" id="access-fragment-instances" href="#access-fragment-instances"><i class="fa fa-link"></i></a>Access Fragment Instances</h3>

<p>Now with this adapter in place, we can also easily access any fragments within the <code>ViewPager</code> with:</p>

<pre class="highlight"><code><span class="n">adapterViewPager</span><span class="o">.</span><span class="na">getRegisteredFragment</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> 
<span class="c1">// returns first Fragment item within the pager</span></code></pre>


<p>and we can easily access the "current" pager item with:</p>

<pre class="highlight"><code><span class="n">adapterViewPager</span><span class="o">.</span><span class="na">getRegisteredFragment</span><span class="o">(</span><span class="n">vpPager</span><span class="o">.</span><span class="na">getCurrentItem</span><span class="o">());</span>
<span class="c1">// returns current Fragment item displayed within the pager</span></code></pre>


<p>This pattern should save your app quite a deal of memory and allow 
for much easier management of fragments within your pager for the right 
situation.</p>

<h2><a class="anchor" id="set-offscreen-page-limit" href="#set-offscreen-page-limit"><i class="fa fa-link"></i></a>Set Offscreen Page Limit</h2>

<p>Alternatively, you can use the method <code>setOffscreenPageLimit(int limit)</code>
 provided by ViewPager to set how many page instances you want the 
system to keep in memory on either side of your current page. As a 
result, more memory will be consumed. So be careful when tweaking this 
setting if your pages have complex layouts. </p>

<p>For example, to let the system keep 3 page instances on both sides of the current page:</p>

<pre class="highlight"><code><span class="n">vpPager</span><span class="o">.</span><span class="na">setOffscreenPageLimit</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span></code></pre>


<p>This can be useful in order to preload more fragments for a smoother viewing experience trading off with memory usage.</p>

<h2><a class="anchor" id="viewpager-with-visible-adjacent-pages" href="#viewpager-with-visible-adjacent-pages"><i class="fa fa-link"></i></a>ViewPager with Visible Adjacent Pages</h2>

<p>If you are interested in a ViewPager with visible adjacent pages that are partially visible:</p>

<p><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/ddm1j.jpg" alt="ViewPager Adjacent"></p>

<p>We can do that with by tuning a few properties of our pager. First, here's how the <code>ViewPager</code> might be defined in the XML Layout:</p>

<pre class="highlight"><code><span class="nt">&lt;android.support.v4.view.ViewPager</span>
  	<span class="na">android:id=</span><span class="s">"@+id/pager"</span>
  	<span class="na">android:gravity=</span><span class="s">"center"</span>
  	<span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
  	<span class="na">android:layout_height=</span><span class="s">"0px"</span>
  	<span class="na">android:paddingLeft=</span><span class="s">"24dp"</span>
  	<span class="na">android:paddingRight=</span><span class="s">"12dp"</span>
  	<span class="na">android:layout_weight=</span><span class="s">"1"</span> <span class="nt">/&gt;</span></code></pre>


<p>Next, we need to tune these properties of the pager in the containing fragment or activity:</p>

<pre class="highlight"><code><span class="n">ViewPager</span> <span class="n">vpPager</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewPager</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">vpPager</span><span class="o">);</span>
<span class="n">vpPager</span><span class="o">.</span><span class="na">setClipToPadding</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
<span class="n">vpPager</span><span class="o">.</span><span class="na">setPageMargin</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
<span class="c1">// Now setup the adapter as normal</span></code></pre>


<p>Finally we need to adjust the width inside the adapter:</p>

<pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyPageAdapter</span> <span class="o">:</span> <span class="n">FragmentStatePagerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">float</span> <span class="n">getPageWidth</span> <span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mf">0.93f</span><span class="o">;</span>
    <span class="o">}</span>	
    
    <span class="c1">// ...</span>
<span class="o">}</span></code></pre>


<p>For more details, you can follow these guides:</p>

<ul>
<li><a href="http://blog.neteril.org/blog/2013/10/14/android-tip-viewpager-with-protruding-children/">ViewPager with Protruding Children</a></li>
<li><a href="http://stackoverflow.com/questions/13914609/viewpager-with-previous-and-next-page-boundaries">ViewPager with Page Boundaries</a></li>
</ul>

<h2><a class="anchor" id="animating-the-scroll-with-pagetransformer" href="#animating-the-scroll-with-pagetransformer"><i class="fa fa-link"></i></a>Animating the Scroll with PageTransformer</h2>

<p>We can customize how the pages animate as they are being swiped between using the <a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.PageTransformer.html">PageTransformer</a>. This transformer exists within the support library and is compatible with API 11 or greater. </p>

<h3><a class="anchor" id="using-a-third-party-library" href="#using-a-third-party-library"><i class="fa fa-link"></i></a>Using a Third-Party Library</h3>

<p>The easiest way to leverage transformers is to use this <a href="https://github.com/ToxicBakery/ViewPagerTransforms">ViewPagerTransforms</a> library:</p>

<p><a href="https://github.com/ToxicBakery/ViewPagerTransforms"><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/qZt0ug9.gif" width="250"></a></p>

<p>Loading the library into <code>app/build.gradle</code> with:</p>

<pre class="highlight"><code><span class="n">compile</span> <span class="s1">'com.ToxicBakery.viewpager.transforms:view-pager-transforms:1.2.32@aar'</span></code></pre>


<p>and then using the desired effect:</p>

<pre class="highlight"><code><span class="c1">// Reference (or instantiate) a ViewPager instance and apply a transformer</span>
<span class="n">pager</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewPager</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">container</span><span class="o">);</span>
<span class="n">pager</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">mAdapter</span><span class="o">);</span>
<span class="n">pager</span><span class="o">.</span><span class="na">setPageTransformer</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="k">new</span> <span class="n">RotateUpTransformer</span><span class="o">());</span></code></pre>


<p>Other transform types include <code>AccordionTransformer</code>, <code>CubeInTransformer</code>, <code>FlipHorizontalTransformer</code>, <code>ScaleInOutTransformer</code>, <code>ZoomInTransformer</code>, and <a href="https://github.com/ToxicBakery/ViewPagerTransforms/tree/master/library/src/main/java/com/ToxicBakery/viewpager/transforms">many others</a>.</p>

<h3><a class="anchor" id="developing-custom-transforms" href="#developing-custom-transforms"><i class="fa fa-link"></i></a>Developing Custom Transforms</h3>

<p>However, custom usage is pretty straightforward, just attach a PageTransformer to the ViewPager:</p>

<pre class="highlight"><code><span class="n">vpPager</span><span class="o">.</span><span class="na">setPageTransformer</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="k">new</span> <span class="n">ViewPager</span><span class="o">.</span><span class="na">PageTransformer</span><span class="o">()</span> <span class="o">{</span> 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">transformPage</span><span class="o">(</span><span class="n">View</span> <span class="n">page</span><span class="o">,</span> <span class="kt">float</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Do our transformations to the pages here</span>
    <span class="o">}</span>
<span class="o">});</span></code></pre>


<p>The first argument is set to true if the <strong>supplied PageTransformer requires page views to be drawn from last to first</strong> instead of first to last. The second argument is the transformer which requires defining the <code>transformPage</code> method to define the sliding page behavior. </p>

<p>The <code>transformPage</code> method accepts two parameters: <code>page</code> which is the particular page to be modified and <code>position</code> which indicates where a given page is located <strong>relative to the center of the screen</strong>. The page <strong>which fills the screen</strong> is at <strong>position 0</strong>. The page immediately to the right is at <strong>position 1</strong>. If the user scrolls halfway between pages one and two, page one has a position of -0.5 and page two has a position of 0.5.</p>

<pre class="highlight"><code><span class="n">vpPager</span><span class="o">.</span><span class="na">setPageTransformer</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="k">new</span> <span class="n">ViewPager</span><span class="o">.</span><span class="na">PageTransformer</span><span class="o">()</span> <span class="o">{</span> 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">transformPage</span><span class="o">(</span><span class="n">View</span> <span class="n">page</span><span class="o">,</span> <span class="kt">float</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">pageWidth</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">pageHeight</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// [-Infinity,-1)</span>
            <span class="c1">// This page is way off-screen to the left.</span>
            <span class="n">view</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">position</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">){</span> <span class="c1">// Page to the left, page centered, page to the right</span>
           <span class="c1">// modify page view animations here for pages in view </span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// (1,+Infinity]</span>
            <span class="c1">// This page is way off-screen to the right.</span>
            <span class="n">view</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">});</span></code></pre>


<p>For more details, check out <a href="http://developer.android.com/training/animation/screen-slide.html#pagetransformer">the official guide</a> or <a href="http://howrobotswork.wordpress.com/2013/06/27/create-viewpager-transitions-a-pagertransformer-example/">this guide</a>. You can also review this cool <a href="https://stevenkideckel.wordpress.com/tag/pagetransformer/">rotating page transformer effect</a> for another example.</p>

<h2><a class="anchor" id="disabling-swipe-events" href="#disabling-swipe-events"><i class="fa fa-link"></i></a>Disabling Swipe Events</h2>

<p>If we want to <strong>disable swipe in a particular direction</strong>, check out this <a href="http://stackoverflow.com/questions/19602369/how-to-disable-viewpager-from-swiping-in-one-direction/34076649#34076649">custom ViewPager that swipes in only one direction</a> using a custom class extending <code>ViewPager</code> that intercepts the swipe touch events.</p>

<p>In certain situations your app might even want to have a <code>ViewPager</code> that allows switching pages using an indicator but that <strong>doesn't intercept swipe events at all</strong>. This is usually because we want to have the swipe events perform another action rather than change the page.</p>

<p>The first step is to define a custom <code>ViewPager</code> <a href="https://gist.github.com/nesquena/898db22a38747bd9bc19">subclass called LockableViewPager</a>. The class inherits from ViewPager and includes a new method called <code>setSwipeable</code> to control if swipe events are enabled or not. Copy <a href="https://gist.github.com/nesquena/898db22a38747bd9bc19">this class</a> into your project. Make sure to change your layout file accordingly:</p>

<pre class="highlight"><code><span class="nt">&lt;mypackage.lockableviewpager</span>
    <span class="na">android:id=</span><span class="s">"@+id/photosViewPager"</span> 
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span> 
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span> <span class="nt">/&gt;</span></code></pre>


<p>Now, just call <code>setSwipeable(false)</code> to disable swiping to change the page. </p>

<h2><a class="anchor" id="launching-an-activity-with-tab-selected" href="#launching-an-activity-with-tab-selected"><i class="fa fa-link"></i></a>Launching an Activity with Tab Selected</h2>

<p>Often when launching a tabbed activity, there needs to be a way to 
select a particular tab to be displayed once the activity loads. For 
example, an activity has three tabs with one tab being a list of created
 posts. After a user creates a post on a separate activity, the user 
needs to be returned to the main activity with the "new posts" tab 
displayed. This can be done through the use of intent extras and the <code>ViewPager#setCurrentItem</code> method. First, when launching the tabbed activity, we need to pass in the selected tab as an extra:</p>

<pre class="highlight"><code><span class="cm">/* In creation activity that wants to launch a tabbed activity */</span>
<span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">MyTabbedActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="c1">// Pass in tab to be displayed</span>
<span class="n">i</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">MyTabbedActivity</span><span class="o">.</span><span class="na">SELECTED_TAB_EXTRA_KEY</span><span class="o">,</span> <span class="n">MyTabbedActivity</span><span class="o">.</span><span class="na">NEW_POSTS_TAB</span><span class="o">);</span>
<span class="c1">// Start the activity</span>
<span class="n">startActivity</span><span class="o">(</span><span class="n">i</span><span class="o">);</span></code></pre>


<p>If the activity needs to return a result, we can also <a class="internal present" href="https://guides.codepath.com/android/Using-Intents-to-Create-Flows#returning-data-result-to-parent-activity">return this as an activity result</a>. Next, we can read this information from the intent within the tabbed activity:</p>

<pre class="highlight"><code><span class="cm">/* In tabbed activity */</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">SELECTED_TAB_EXTRA_KEY</span> <span class="o">=</span> <span class="s">"selectedTabIndex"</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">HOME_TAB</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">FAVORITES_TAB</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">NEW_POSTS_TAB</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main_activity</span><span class="o">);</span>
    <span class="c1">// Set the selected tab</span>
    <span class="n">setSelectedTab</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// Reads selected tab from launching intent and </span>
<span class="c1">// sets page accordingly</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSelectedTab</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">// Fetch the selected tab index with default</span>
   <span class="kt">int</span> <span class="n">selectedTabIndex</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">SELECTED_TAB_EXTRA_KEY</span><span class="o">,</span> <span class="n">HOME_TAB</span><span class="o">);</span> 
   <span class="c1">// Switch to page based on index</span>
   <span class="n">vpPager</span><span class="o">.</span><span class="na">setCurrentItem</span><span class="o">(</span><span class="n">selectedTabIndex</span><span class="o">);</span>
<span class="o">}</span></code></pre>


<p>With that, any activity can launch the tabbed activity with the ability to configure the selected tab.</p>

<h2><a class="anchor" id="custom-pages-without-fragments" href="#custom-pages-without-fragments"><i class="fa fa-link"></i></a>Custom Pages without Fragments</h2>

<p>While a <code>ViewPager</code> is often coupled with a <code>Fragment</code> for each page using the <code>FragmentPagerAdapter</code>, there are cases where the pages are better off as plain views. </p>

<p><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/VaCvAm5.png" width="200"></p>

<p>A good example is an image gallery, where the user can swipe between different pictures. To achieve this, we can extend from <code>PagerAdapter</code>:</p>

<pre class="highlight"><code><span class="c1">// Custom pager adapter not using fragments</span>
<span class="kd">class</span> <span class="nc">CustomPagerAdapter</span> <span class="kd">extends</span> <span class="n">PagerAdapter</span> <span class="o">{</span>
 
    <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
    <span class="n">LayoutInflater</span> <span class="n">mLayoutInflater</span><span class="o">;</span>
    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&gt;</span> <span class="n">pages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
 
    <span class="kd">public</span> <span class="n">CustomPagerAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
        <span class="n">mLayoutInflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="c1">// Returns the number of pages to be displayed in the ViewPager.</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">getCount</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">pages</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
 
    <span class="c1">// Returns true if a particular object (page) is from a particular page</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">isViewFromObject</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">view</span> <span class="o">==</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
 
    <span class="c1">// This method should create the page for the given position passed to it as an argument. </span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="n">instantiateItem</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Inflate the layout for the page</span>
        <span class="n">View</span> <span class="n">itemView</span> <span class="o">=</span> <span class="n">mLayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">pager_item</span><span class="o">,</span> <span class="n">container</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="c1">// Find and populate data into the page (i.e set the image)</span>
        <span class="n">ImageView</span> <span class="n">imageView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">imageView</span><span class="o">);</span>
        <span class="c1">// ...</span>
        <span class="c1">// Add the page to the container</span>
        <span class="n">container</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">itemView</span><span class="o">);</span>
        <span class="c1">// Return the page</span>
        <span class="k">return</span> <span class="n">itemView</span><span class="o">;</span>
    <span class="o">}</span>
 
    <span class="c1">// Removes the page from the container for the given position.</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">destroyItem</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">container</span><span class="o">.</span><span class="na">removeView</span><span class="o">((</span><span class="n">View</span><span class="o">)</span> <span class="n">object</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>


<p>This is most commonly used for image slideshows or galleries. See <a href="http://codetheory.in/android-image-slideshow-using-viewpager-pageradapter/">this image gallery tutorial</a> or this <a href="https://www.bignerdranch.com/blog/viewpager-without-fragments/">viewpager without fragments</a> guide for more detailed steps.</p>

<h2><a class="anchor" id="custom-viewpager-indicators" href="#custom-viewpager-indicators"><i class="fa fa-link"></i></a>Custom ViewPager Indicators</h2>

<p>An "indicator" is the UI element that displays the possible pages and
 the current page such as "tabs". There are a number of other custom 
indicators for the pager that can be helpful in various contexts. </p>

<p><a href="https://github.com/DavidPacioianu/InkPageIndicator"><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/SBxPXZZ.gif" height="600"></a>
<a href="https://github.com/chenupt/SpringIndicator"><img src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/lCMRaJX.gif" height="600"></a></p>

<p>A few of the most interesting ones are listed below:</p>

<ul>
<li>
<a href="https://github.com/chenupt/SpringIndicator">Spring indicator with animated elastic selection</a>. Indicator that visually springs between pages as dragged. </li>
<li>
<a href="https://github.com/ongakuer/CircleIndicator">Simple circle "dots" indicator for pages</a>. Indicator that displays the typical "dots" associated to pages. </li>
<li>
<a href="https://github.com/DavidPacioianu/InkPageIndicator">Custom "Ink" dots indicator for pages</a>. Indicator that displays dots for items and uses "ink" to visualize the current page. </li>
</ul>

<h2><a class="anchor" id="references" href="#references"><i class="fa fa-link"></i></a>References</h2>

<ul>
<li><a href="http://architects.dzone.com/articles/android-tutorial-using">http://architects.dzone.com/articles/android-tutorial-using</a></li>
<li><a href="http://developer.android.com/training/animation/screen-slide.html">http://developer.android.com/training/animation/screen-slide.html</a></li>
<li><a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.html">http://developer.android.com/reference/android/support/v4/view/ViewPager.html</a></li>
<li><a href="http://android-developers.blogspot.com/2011/08/horizontal-view-swiping-with-viewpager.html">http://android-developers.blogspot.com/2011/08/horizontal-view-swiping-with-viewpager.html</a></li>
<li><a href="http://viewpagerindicator.com/">http://viewpagerindicator.com/</a></li>
<li><a href="http://mobile.tutsplus.com/tutorials/android/android-user-interface-design-horizontal-view-paging/">http://mobile.tutsplus.com/tutorials/android/android-user-interface-design-horizontal-view-paging/</a></li>
<li><a href="http://tamsler.blogspot.com/2011/10/android-viewpager-and-fragments.html">http://tamsler.blogspot.com/2011/10/android-viewpager-and-fragments.html</a></li>
<li><a href="http://www.truiton.com/2013/05/android-fragmentpageradapter-example/">http://www.truiton.com/2013/05/android-fragmentpageradapter-example/</a></li>
</ul>
</div></div></div></div><a href="https://github.com/codepath/android_guides/wiki/" class="visible-md visible-lg"><img style="position: fixed; bottom: 0; right: 0; border: 0;" src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/fork_me.png" alt="Fork me on GitHub"></a><script src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/jquery.js" type="text/javascript"></script><script src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/jquery_002.js" type="text/javascript"></script><script src="ViewPager%20with%20FragmentPagerAdapter%20_%20CodePath%20Android%20Cliffnotes_files/application.js" type="text/javascript"></script></body></html>